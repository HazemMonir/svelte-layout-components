{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/layout/Cover.svelte",
    "../src/layout/Grid.svelte",
    "../src/layout/Box.svelte",
    "../src/layout/Stack.svelte",
    "../src/layout/Bracket.svelte",
    "../src/layout/Cluster.svelte",
    "../src/layout/Sidebar.svelte",
    "../src/layout/Switcher.svelte",
    "../src/layout/Frame.svelte",
    "../src/layout/Reel.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let space = 's0';\n    export let minHeight = '100vh';\n    export let pad = true;\n\n    const id = buildId('cover', space, minHeight, pad);\n\n\tonMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => {\n            e.style.minHeight = cssValue(minHeight);\n            pad ? e.style.padding = cssValue(space) : null;\n        });\n        document.querySelectorAll(`.${id} > .above`).forEach(e => e.style.marginBottom = cssValue(space));\n        document.querySelectorAll(`.${id} > .below`).forEach(e => e.style.marginTop = cssValue(space));\n\t});\n</script>\n\n<style>\n    [class^=\"cover\"] {\n        display: flex;\n        flex-direction: column;\n    }\n\n    [class^=\"cover\"] > .center {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n\n    [class^=\"cover\"] > .above {\n        margin-top: 0;\n    }\n\n    [class^=\"cover\"] > .below {\n        margin-bottom: 0;\n    }\n</style>\n\n<div class={id}>\n    <div class=\"above\">\n        <slot name=\"above\"></slot>\n    </div>\n    <div class=\"center\">\n        <slot></slot>\n    </div>\n    <div class=\"below\">\n        <slot name=\"below\"></slot>\n    </div>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let min = '12rem';\n    export let space = 's0';\n\n    const id = buildId('grid', min, space);\n\n\tonMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => {\n            e.style.gridGap = `var(--${space}, ${space})`;\n            e.style.gridTemplateColumns = `repeat(auto-fit, minmax(${cssValue(min)}, 1fr))`;\n        });\n\t});\n</script>\n\n<style>\n    [class^=\"grid\"] {\n        display: grid;\n    }\n</style>\n\n<div class={id}>\n    <slot></slot>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let padding = 's1';\n    export let color = 'color-primary';\n    export let backgroundColor = 'color-secondary';\n    export let borderWidth = 'border-medium';\n    export let borderStyle = 'solid';\n    export let borderColor = 'color-primary';\n\n    const id = buildId('box', padding, color, backgroundColor, borderWidth, borderStyle, borderColor);\n\n    onMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => {\n            e.style.padding = cssValue(padding);\n            e.style.color = cssValue(color);\n            e.style.backgroundColor = cssValue(backgroundColor);\n\n            if (borderWidth) {\n                e.style.border = cssValue(borderWidth, borderStyle, borderColor);\n            } else {\n                e.style.outline = '0.125rem solid transparent';\n                e.style.outlineOffset = '-0.125rem';\n            }\n        });\n\t});\n</script>\n\n<style>\n    [class^=\"box\"] * {\n        color: inherit;\n    }\n</style>\n\n<div class={id}>\n    <slot>\n    </slot>\n</div>",
    "<script>\n\timport { onMount } from 'svelte';\n\timport { cssValue, buildId } from '../lib/helpers';\n\n\texport let space = 's0';\n\texport let recursive = false;\n\t/** splitAfter can only be a number (handed as a string), but not a CSS-variable */\n\texport let splitAfter = '';\n\n\tconst id = buildId('stack', space, recursive, splitAfter);\n\n\tonMount(() => {\n\t\tif (recursive) {\n\t\t\tdocument.querySelectorAll(`.${id} * + *`).forEach(e => e.style.marginTop = cssValue(space));\n\t\t} else {\n\t\t\tdocument.querySelectorAll(`.${id} > * + *`).forEach(e => e.style.marginTop = cssValue(space));\n\t\t}\n\n\t\tif (splitAfter) {\n\t\t\tdocument.querySelectorAll(`.${id} > :nth-child(${splitAfter})`).forEach(e => e.style.marginBottom = 'auto');\n\t\t}\n\t});\n</script>\n\n<style>\n\t[class^=\"stack\"] {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n\t/* allow for split even if no sibling height is available */\n\t[class^=\"stack\"]:only-child {\n        height: 100%;\n    }\n</style>\n\n<div class={id}>\n    <slot>\n    </slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let maxWidth = 'measure';\n    export let andText = true;\n    export let space = 'zero';\n    export let padding = 's0';\n    export let intrinsic = false;\n\n    const id = buildId('bracket', maxWidth, andText, space, padding, intrinsic);\n\n\tonMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => e.style.padding = cssValue(padding));\n        document.querySelectorAll(`.${id} > .left`).forEach(e => e.style.marginRight = cssValue(space));\n        document.querySelectorAll(`.${id} > .right`).forEach(e => e.style.marginLeft = cssValue(space));\n\n        document.querySelectorAll(`.${id} > .center`).forEach(e => {\n            e.style.maxWidth = cssValue(maxWidth);\n            intrinsic ? e.style.alignItems = 'center' : null;\n            andText ? e.style.textAlign = 'center' : null;\n        });\n\t});\n</script>\n\n<style>\n    [class^=\"bracket\"] {\n        display: flex;\n    }\n\n    [class^=\"bracket\"] > .center {\n        margin-left: auto;\n        margin-right: auto;\n        display: flex;\n        flex-direction: column;\n    }\n\n    [class^=\"bracket\"] > .left {\n        margin-left: 0;\n    }\n\n    [class^=\"bracket\"] > .right {\n        margin-right: 0;\n    }\n</style>\n\n<div class={id}>\n    <div class=\"left\">\n        <slot name=\"left\"></slot>\n    </div>\n    <div class=\"center\">\n        <slot></slot>\n    </div>\n    <div class=\"right\" style=\"\">\n        <slot name=\"right\"></slot>\n    </div>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let justify = 'center';\n    export let align = 'center';\n    export let space = 's0';\n\n    const id = buildId('cluster', justify, align, space);\n\n    onMount(() => {\n        document.querySelectorAll(`.${id} > *`).forEach(e => {\n            e.style.justifyContent = cssValue(justify);\n            e.style.alignItems = cssValue(align);\n            e.style.margin = `calc(${cssValue(space)} / 2 * -1)`\n        });\n        document.querySelectorAll(`.${id} > * > *`).forEach(e => e.style.margin = `calc(${cssValue(space)} / 2)`);\n\t});\n</script>\n\n<style>\n    [class^=\"cluster\"] {\n        overflow: hidden;\n    }\n    \n    :global([class^=\"cluster\"] > *) {\n        display: flex;\n        flex-wrap: wrap;\n    }\n</style>\n\n<div class={id}>\n    <slot>\n    </slot>\n</div>\n\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let side = 'left';\n    export let sideWidth = '';\n    export let contentMin = '50%';\n    export let space = 's0';\n\n    const id = buildId('with-sidebar', side, sideWidth, contentMin, space);\n\n\tonMount(() => {\n        if (sideWidth) {\n            document.querySelector(`.${id} > * > .sidebar`).forEach(e => e.style.flexBasis = cssValue(sideWidth));\n        }\n\n        if (contentMin) {\n            document.querySelectorAll(`.${id} > * > .not-sidebar`).forEach(e => e.style.minWidth = cssValue(contentMin));\n        }\n\n        if (space) {\n            document.querySelectorAll(`.${id} > *`).forEach(e => e.style.margin = `calc(${cssValue(space)} / 2 * -1)`);\n            document.querySelectorAll(`.${id} > * > *`).forEach(e => e.style.margin = `calc(${cssValue(space)} / 2)`);\n            document.querySelectorAll(`.${id} > * > .not-sidebar`).forEach(e => e.style.minWidth = `calc(${cssValue(contentMin)} - ${cssValue(space)})`);\n        }\n\t});\n</script>\n\n<style>\n    [class^=\"with-sidebar\"] {\n        overflow: hidden;\n    }\n\n    [class^=\"with-sidebar\"] > * {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .sidebar {\n        flex-grow: 1;\n    }\n\n    [class^=\"not-sidebar\"] {\n        /* â†“ grow from nothing */\n        flex-basis: 0;\n        flex-grow: 999;\n    }\n</style>\n\n<div class={id}>\n    <div>\n        {#if side === 'left'}\n            <div class=\"sidebar\">\n                <slot name=\"sidebar\"></slot>\n            </div>\n            <div class=\"not-sidebar\">\n                <slot name=\"not-sidebar\"></slot>\n            </div>\n        {:else}\n            <div class=\"not-sidebar\">\n                <slot name=\"not-sidebar\"></slot>\n            </div>\n            <div class=\"sidebar\">\n                <slot name=\"sidebar\"></slot>\n            </div>\n        {/if}\n    </div>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let threshold = 'measure';\n    export let space = 's0';\n    /** limit can only be a number (handed as a string), but not a CSS-variable */\n    export let limit = '5';\n\n    const id = buildId('switcher', threshold, space, limit);\n\n    onMount(() => {\n        document.querySelectorAll(`.${id} > *`).forEach(e => e.style.margin = `calc(${cssValue(space)} / 2 * -1)`);\n        document.querySelectorAll(`.${id} > * > *`).forEach(e => {\n            e.style.flexBasis = `calc((${cssValue(threshold)} - 100% + ${cssValue(space)}) * 999)`;\n            e.style.margin = `calc(${cssValue(space)} / 2)`;\n        });\n\n        if (limit) {\n            document.querySelectorAll(`.${id} > * > :nth-last-child(n+${limit}), .${id} > * > :nth-last-child(n+${limit}) ~ *`)\n                .forEach(e => e.style.flexBasis = '100%');\n        }\n\t});\n</script>\n\n<style>\n    :global([class^=\"switcher\"] > *) {\n        display: flex;\n        flex-wrap: wrap;\n        overflow: hidden;\n    }\n\n    :global([class^=\"switcher\"] > * > *) {\n        flex-grow: 1;\n    }\n</style>\n\n<div class={id}>\n    <div>\n        <slot></slot>\n    </div>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let n = '6';\n    export let d = '9';\n\n    const id = buildId('frame', n, d);\n\n\tonMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => e.style.paddingBottom = `calc(${cssValue(n)} / ${cssValue(d)} * 100%)`);\n\t});\n</script>\n\n<style>\n    [class^=\"frame\"] {\n        position: relative;\n    }\n\n    :global([class^=\"frame\"] > *) {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n    }\n\n    :global([class^=\"frame\"] > img, [class^=\"frame\"] > video) {\n        height: 100%;\n        width: 100%;\n        object-fit: cover;\n    }\n</style>\n\n<div class={id}>\n    <slot></slot>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue, buildId } from '../lib/helpers';\n\n    export let itemWidth = 'auto';\n    export let space = 's1';\n    export let height = 'auto';\n\n    const id = buildId('reel', itemWidth, space, height);\n\n\tonMount(() => {\n        document.querySelectorAll(`.${id}`).forEach(e => {\n            e.style.height = cssValue(height);\n        });\n        document.querySelectorAll(`.${id} > * + *`).forEach(e => e.style.marginLeft = cssValue(space));\n        document.querySelectorAll(`.${id} > *`).forEach(e => e.style.flex = `0 0 ${cssValue(itemWidth)}`);\n\t});\n</script>\n\n<style>\n    [class^=\"reel\"] {\n        display: flex;\n        overflow-x: auto;\n        overflow-y: hidden;\n    }\n\n    :global([class^=\"reel\"] > img) {\n        height: 100%;\n        flex-basis: auto;\n        width: auto;\n    }\n</style>\n\n<div class={id}>\n    <slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}