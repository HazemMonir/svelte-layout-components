{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/layout/Cluster.svelte",
    "../src/layout/Cover.svelte",
    "../src/layout/Box.svelte",
    "../src/layout/Bracket.svelte",
    "../src/layout/Grid.svelte",
    "../src/layout/Frame.svelte",
    "../src/layout/Imposter.svelte",
    "../src/layout/Reel.svelte",
    "../src/layout/Sidebar.svelte",
    "../src/layout/Stack.svelte",
    "../src/layout/Switcher.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { Cover, Grid, Box, Stack, Bracket, Cluster, Sidebar, Switcher, Frame, Reel, Imposter } from './layout';\n\timport Presentation from './Presentation.svelte';\n</script>\n\n<style>\n\t:global([slot]) {\n\t\tdisplay: contents;\n\t}\n</style>\n\n<Cover>\n\t<div slot=\"above\">\n\t\t<Bracket>\n\t\t\t<a id=\"top\" href=\"https://github.com/SilvanCodes/svelte-layout-components\" target=\"blank\"><h1>EveryLayout in Svelte</h1></a>\n\t\t</Bracket>\n\t</div>\n\t<Grid minWidth=\"18rem\">\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/stack/\" target=\"blank\"><h5>Stack</h5></a>\n\t\t\t<Stack recursive>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><p>some</p></li>\n\t\t\t\t\t<li><p>equally</p></li>\n\t\t\t\t\t<li><p>spaced</p></li>\n\t\t\t\t\t<li><p>content</p></li>\n\t\t\t\t</ul>\n\t\t\t</Stack>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/box/\" target=\"blank\"><h5>Box</h5></a>\n\t\t\t<Box padding=\"s1\"></Box>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/center/\" target=\"blank\"><h5>Bracket</h5></a>\n\t\t\t<Bracket>\n\t\t\t\t<div slot=\"left\">\n\t\t\t\t\t<Box padding=\"zero\">\n\t\t\t\t\t\t<div style=\"height:calc(var(--s1) * 2);\"></div>\n\t\t\t\t\t</Box>\n\t\t\t\t</div>\n\t\t\t\t<Box padding=\"s1\"></Box>\n\t\t\t\t<div slot=\"right\">\n\t\t\t\t\t<Box padding=\"zero\">\n\t\t\t\t\t\t<div style=\"height:calc(var(--s1) * 2);\"></div>\n\t\t\t\t\t</Box>\n\t\t\t\t</div>\n\t\t\t</Bracket>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/cluster/\" target=\"blank\"><h5>Cluster</h5></a>\n\t\t\t<Cluster>\n\t\t\t\t<ul style=\"list-style: none\">\n\t\t\t\t\t<li><p>Content</p></li>\n\t\t\t\t\t<li><p>Content</p></li>\n\t\t\t\t\t<li><p>Content</p></li>\n\t\t\t\t\t<li><p>Content</p></li>\n\t\t\t\t\t<li><p>Content</p></li>\n\t\t\t\t</ul>\n\t\t\t</Cluster>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/sidebar/\" target=\"blank\"><h5>Sidebar</h5></a>\n\t\t\t<Sidebar>\n\t\t\t\t<div slot=\"sidebar\">\n\t\t\t\t\t<Box padding=\"s-2\" color=\"white\">\n\t\t\t\t\t\t<Stack splitAfter=\"1\">\n\t\t\t\t\t\t\t<p>A</p>\n\t\t\t\t\t\t\t<p>B</p>\n\t\t\t\t\t\t</Stack>\n\t\t\t\t\t</Box>\n\t\t\t\t</div>\n\t\t\t\t<div slot=\"not-sidebar\">\n\t\t\t\t\t<Box color=\"white\">\n\t\t\t\t\t\t<p>Main Content</p>\n\t\t\t\t\t</Box>\n\t\t\t\t</div>\n\t\t\t</Sidebar>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/switcher/\" target=\"blank\"><h5>Switcher</h5></a>\n\t\t\t<Switcher minWidth=\"13rem\">\n\t\t\t\t<Box></Box>\n\t\t\t\t<Box></Box>\n\t\t\t\t<Box></Box>\n\t\t\t</Switcher>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/cover/\" target=\"blank\"><h5>Cover</h5></a>\n\t\t\t<Cover minHeight=\"10vh\">\n\t\t\t\t<div slot=\"above\">\n\t\t\t\t\t<Box padding=\"zero\"></Box>\n\t\t\t\t</div>\n\t\t\t\t<Box padding=\"s1\"></Box>\n\t\t\t\t<div slot=\"below\">\n\t\t\t\t\t<Box padding=\"zero\"></Box>\n\t\t\t\t</div>\n\t\t\t</Cover>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/grid/\" target=\"blank\"><h5>Grid</h5></a>\n\t\t\t<div style=\"min-width: 8rem;\">\n\t\t\t\t<Grid minWidth=\"s1\">\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">X</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">X</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">o</Box>\n\t\t\t\t\t<Box padding=\"s-3\" color=\"white\">X</Box>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/frame/\" target=\"blank\"><h5>Frame</h5></a>\n\t\t\t<Box padding=\"zero\">\n\t\t\t\t<Frame>\n\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t</Frame>\n\t\t\t</Box>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://every-layout.dev/layouts/reel/\" target=\"blank\"><h5>Reel</h5></a>\n\t\t\t<Box padding=\"zero\" backgroundColor=\"white\">\n\t\t\t\t<div style=\"max-width: 12rem;\">\n\t\t\t\t\t<Reel itemWidth=\"s4\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t\t<img src=\"favicon.png\" alt=\"favicon\">\n\t\t\t\t\t</Reel>\n\t\t\t\t</div>\n\t\t\t</Box>\n\t\t</Presentation>\n\n\t\t<Presentation>\n\t\t\t<a slot=\"title\" href=\"https://absolutely.every-layout.dev/layouts/imposter/\" target=\"blank\"><h5>Imposter</h5></a>\n\t\t\t<Box padding=\"zero\" backgroundColor=\"white\">\n\t\t\t\t<div style=\"max-width: 12rem; position: relative;\">\n\t\t\t\t\t<p>Some obscured text. Some obscured text. Some obscured text. Some obscured text. Some obscured text.</p>\n\t\t\t\t\t<Imposter>\n\t\t\t\t\t\t<Box color=\"white\" padding=\"s-2\">\n\t\t\t\t\t\t\t<p>I'm infront!</p>\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<br>\n\t\t\t\t\t\t\t<p>And scrollable!</p>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Imposter>\n\t\t\t\t</div>\n\t\t\t</Box>\n\t\t</Presentation>\n\t</Grid>\n\t<div slot=\"below\">\n\t\t<Bracket>\n\t\t\t<a href=\"#top\"><p>Back to top</p></a>\n\t\t</Bracket>\n\t</div>\n</Cover>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let alignItems = 'center';\n    export let justifyContent = 'center';\n\n    let cluster;\n\n    onMount(() => {\n        cluster.querySelectorAll(`.cluster > *`).forEach(e => {\n            e.style.justifyContent = cssValue(justifyContent);\n            e.style.alignItems = cssValue(alignItems);\n            e.style.margin = `calc(${cssValue(gap)} / 2 * -1)`;\n        });\n        cluster.querySelectorAll(`.cluster > * > *`).forEach(e => e.style.margin = `calc(${cssValue(gap)} / 2)`);\n\t});\n</script>\n\n<style>\n    .cluster {\n        overflow: hidden;\n    }\n\n    .cluster > :global(*) {\n        display: flex;\n        flex-wrap: wrap;\n    }\n</style>\n\n<div bind:this={cluster} class=\"cluster\">\n    <slot>\n    </slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let padding = 's0';\n    export let minHeight = '100vh';\n\n    let cover;\n    let above;\n    let below;\n\n\tonMount(() => {\n        cover.style.minHeight = cssValue(minHeight);\n        cover.style.padding = cssValue(padding);\n\n        // set minimal gap between center and above/below\n        above.style.marginBottom = cssValue(gap);\n        below.style.marginTop = cssValue(gap);\n\t});\n</script>\n\n<style>\n    .cover {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .cover > .center {\n        margin-top: auto;\n        margin-bottom: auto;\n    }\n\n    .cover > .above {\n        margin-top: 0;\n    }\n\n    .cover > .below {\n        margin-bottom: 0;\n    }\n</style>\n\n<div bind:this={cover} class=\"cover\">\n    <div bind:this={above} class=\"above\">\n        <slot name=\"above\"></slot>\n    </div>\n    <div class=\"center\">\n        <slot></slot>\n    </div>\n    <div bind:this={below} class=\"below\">\n        <slot name=\"below\"></slot>\n    </div>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let padding = 's0';\n    export let color = 'color-primary';\n    export let backgroundColor = 'color-secondary';\n    export let borderWidth = 'border-medium';\n    export let borderStyle = 'solid';\n    export let borderColor = 'color-primary';\n\n    let box;\n\n    onMount(() => {\n        box.style.padding = cssValue(padding);\n        box.style.color = cssValue(color);\n        box.style.backgroundColor = cssValue(backgroundColor);\n\n        if (borderWidth) {\n            box.style.border = cssValue(borderWidth, borderStyle, borderColor);\n        } else {\n            box.style.outline = '0.125rem solid transparent';\n            box.style.outlineOffset = '-0.125rem';\n        }\n\t});\n</script>\n\n<style>\n    .box :global(*) {\n        color: inherit;\n    }\n</style>\n\n<div bind:this={box} class=\"box\">\n    <slot>\n    </slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let padding = 's0';\n    export let maxWidth = 'measure';\n    export let centerText = false;\n    export let centerItems = false;\n\n    let bracket;\n    let left;\n    let center;\n    let right;\n\n\tonMount(() => {\n        bracket.style.padding = cssValue(padding);\n\n        left.style.marginRight = cssValue(gap);\n        right.style.marginLeft = cssValue(gap);\n\n        center.style.maxWidth = cssValue(maxWidth);\n        centerText ? center.style.textAlign = 'center' : null;\n        centerItems ? center.style.alignItems = 'center' : null;\n\t});\n</script>\n\n<style>\n    .bracket {\n        display: flex;\n    }\n\n    .bracket > .center {\n        margin-left: auto;\n        margin-right: auto;\n    }\n\n    .bracket > .left {\n        margin-left: 0;\n    }\n\n    .bracket > .right {\n        margin-right: 0;\n    }\n</style>\n\n<div bind:this={bracket} class=\"bracket\">\n    <div bind:this={left} class=\"left\">\n        <slot name=\"left\"></slot>\n    </div>\n    <div bind:this={center} class=\"center\">\n        <slot></slot>\n    </div>\n    <div bind:this={right} class=\"right\">\n        <slot name=\"right\"></slot>\n    </div>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let minWidth = 'measure';\n\n    let grid;\n\n\tonMount(() => {\n        grid.style.gridGap = cssValue(gap);\n        grid.style.gridTemplateColumns = `repeat(auto-fit, minmax(${cssValue(minWidth)}, 1fr))`;\n\t});\n</script>\n\n<style>\n    .grid {\n        display: grid;\n    }\n</style>\n\n<div bind:this={grid} class=\"grid\">\n    <slot></slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let ratio = '16:9';\n    $: [d,n] = ratio.split(':');\n\n    let frame;\n\n\tonMount(() => {\n        frame.style.paddingBottom = `calc(${cssValue(n)} / ${cssValue(d)} * 100%)`;\n\t});\n</script>\n\n<style>\n    .frame {\n        position: relative;\n    }\n\n    .frame > :global(*) {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n    }\n\n    .frame > :global(img), .frame > :global(video) {\n        height: 100%;\n        width: 100%;\n        object-fit: cover;\n    }\n</style>\n\n<div bind:this={frame} class=\"frame\">\n    <slot></slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let fixed = false;\n    export let breakout = false;\n\n    let imposter;\n\n    onMount(() => {\n        fixed ? imposter.style.position = 'fixed' : null;\n        if (!breakout) {\n            imposter.style.maxWidth = `calc(100% - ${cssValue(gap)} * 2)`;\n            imposter.style.maxHeight = `calc(100% - ${cssValue(gap)} * 2)`;\n        }\n\n    });\n</script>\n\n<style>\n    .imposter {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        overflow: auto;\n    }\n</style>\n\n<div bind:this={imposter} class=\"imposter\">\n    <slot></slot>\n</div>",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let height = 'auto';\n    export let itemWidth = 'auto';\n\n    let reel;\n\n\tonMount(() => {\n        reel.style.height = cssValue(height);\n        reel.querySelectorAll(`.reel > * + *`).forEach(e => e.style.marginLeft = cssValue(gap));\n        reel.querySelectorAll(`.reel > *`).forEach(e => e.style.flex = `0 0 ${cssValue(itemWidth)}`);\n\t});\n</script>\n\n<style>\n    .reel {\n        display: flex;\n        overflow-x: auto;\n        overflow-y: hidden;\n    }\n\n    .reel > :global(img) {\n        height: 100%;\n        flex-basis: auto;\n        width: auto;\n    }\n</style>\n\n<div bind:this={reel} class=\"reel\">\n    <slot></slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let sidebarIs = 'left';\n    export let sideWidth = '';\n    export let contentMinWidth = '50%';\n\n    let withSidebar;\n    let notSidebar;\n    let sidebar;\n\n\tonMount(() => {\n        notSidebar.style.minWidth = cssValue(contentMinWidth);\n\n        if (sideWidth) {\n            sidebar.style.flexBasis = cssValue(sideWidth);\n        }\n\n        if (gap) {\n            withSidebar.querySelectorAll(`.with-sidebar > *`).forEach(e => e.style.margin = `calc(${cssValue(gap)} / 2 * -1)`);\n            withSidebar.querySelectorAll(`.with-sidebar > * > *`).forEach(e => e.style.margin = `calc(${cssValue(gap)} / 2)`);\n            notSidebar.style.minWidth = `calc(${cssValue(contentMinWidth)} - ${cssValue(gap)})`;\n        }\n\t});\n</script>\n\n<style>\n    .with-sidebar {\n        overflow: hidden;\n    }\n\n    .with-sidebar > * {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .sidebar {\n        flex-grow: 1;\n    }\n\n    .not-sidebar {\n        /* ↓ grow from nothing */\n        flex-basis: 0;\n        flex-grow: 999;\n    }\n</style>\n\n<div bind:this={withSidebar} class=\"with-sidebar\">\n    <div>\n        {#if sidebarIs === 'left'}\n            <div bind:this={sidebar} class=\"sidebar\">\n                <slot name=\"sidebar\"></slot>\n            </div>\n            <div bind:this={notSidebar} class=\"not-sidebar\">\n                <slot name=\"not-sidebar\"></slot>\n            </div>\n        {:else}\n            <div bind:this={notSidebar} class=\"not-sidebar\">\n                <slot name=\"not-sidebar\"></slot>\n            </div>\n            <div bind:this={sidebar} class=\"sidebar\">\n                <slot name=\"sidebar\"></slot>\n            </div>\n        {/if}\n    </div>\n</div>\n",
    "<script>\n\timport { onMount } from 'svelte';\n\timport { cssValue } from '../lib/helpers';\n\n\texport let gap = 's0';\n\texport let recursive = false;\n\t/** splitAfter can only be a number (handed as a string), but not a CSS-variable */\n\texport let splitAfter = '';\n\n\tlet stack;\n\n\tonMount(() => {\n\t\tif (recursive) {\n\t\t\tstack.querySelectorAll(`* + *`).forEach(e => e.style.marginTop = cssValue(gap));\n\t\t} else {\n\t\t\tstack.querySelectorAll(`.stack > * + *`).forEach(e => e.style.marginTop = cssValue(gap));\n\t\t}\n\n\t\tif (splitAfter) {\n\t\t\tstack.querySelectorAll(`.stack > :nth-child(${splitAfter})`).forEach(e => e.style.marginBottom = 'auto');\n\t\t}\n\t});\n</script>\n\n<style>\n\t.stack {\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-start;\n    }\n\n\t/* allow for split even if no sibling height is available */\n\t.stack:only-child {\n        height: 100%;\n    }\n</style>\n\n<div bind:this={stack} class=\"stack\">\n    <slot>\n    </slot>\n</div>\n",
    "<script>\n    import { onMount } from 'svelte';\n    import { cssValue } from '../lib/helpers';\n\n    export let gap = 's0';\n    export let minWidth = 'measure';\n    /** limit can only be a number (handed as a string), but not a CSS-variable */\n    export let limit = '';\n\n    let switcher;\n\n    onMount(() => {\n        switcher.querySelectorAll(`.switcher > *`).forEach(e => e.style.margin = `calc(${cssValue(gap)} / 2 * -1)`);\n        switcher.querySelectorAll(`.switcher > * > *`).forEach(e => {\n            e.style.flexBasis = `calc((${cssValue(minWidth)} - 100% + ${cssValue(gap)}) * 999)`;\n            e.style.margin = `calc(${cssValue(gap)} / 2)`;\n        });\n\n        if (limit) {\n            switcher.querySelectorAll(`.switcher > * > :nth-last-child(n+${limit}), .switcher > * > :nth-last-child(n+${limit}) ~ *`)\n                .forEach(e => e.style.flexBasis = '100%');\n        }\n\t});\n</script>\n\n<style>\n    .switcher > * {\n        display: flex;\n        flex-wrap: wrap;\n        overflow: hidden;\n    }\n\n    .switcher > * > :global(*) {\n        flex-grow: 1;\n    }\n</style>\n\n<div bind:this={switcher} class=\"switcher\">\n    <div>\n        <slot></slot>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}